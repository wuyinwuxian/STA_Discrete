import numpy as np


def f1(x):
    Q = np.array([
        [4, -2, -3, 0, 1, 4, 5, -2],
        [-2, -4, 0, 0, 2, 2, 0, 0],
        [-3, 0, 8, -2, 0, 3, 4, 0],
        [0, 0, -2, -4, 4, 4, 0, 1],
        [1, 2, 0, 4, 100, 2, 0, -2],
        [4, 2, 3, 4, 2, 100, 1, 0],
        [5, 0, 4, 0, 0, 1, 200, 4],
        [-3, 0, 0, 1, -2, 0, 4, 10],
    ])
    C_T = np.array([-4, 1, -8, 3, -100, -10, -20, 0])
    result = 0.5 * (x @ Q @ x.T) + (C_T @ x.T)
    return result


def f2(x):
    Q = np.array([[-1, -2, 2, 8, -5, 1, -4, 0, 0, 8],
                  [-2, 2, 0, -5, 4, -4, -4, -5, 0, -5],
                  [2, 0, 2, -3, 7, 0, -3, 7, 5, 0],
                  [8, -5, -3, -1, -3, -1, 7, 1, 7, 2],
                  [-5, 4, 7, -3, 1, 0, -4, 2, 4, -2],
                  [1, -4, 0, -1, 0, 1, 9, 5, 2, 0],
                  [-4, -4, -3, 7, -4, 9, 3, 1, 2, 0],
                  [0, -5, 7, 1, 2, 5, 1, 0, -3, -2],
                  [0, 0, 5, 7, 4, 2, 2, -3, 2, 3],
                  [8, -5, 0, 2, -2, 0, 0, -2, 3, 3]])
    result = x @ Q @ x.T
    return result


def f3(x):
    Q = np.array([[-3, 7, 0, -5, 1, 1, 0, 2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6],
                  [7, 0, -5, 1, 1, 0, 2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3],
                  [0, -5, 1, 1, 0, 2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7],
                  [-5, 1, 1, 0, 2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0],
                  [1, 1, 0, 2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5],
                  [1, 0, 2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1],
                  [0, 2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1],
                  [2, -1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0],
                  [-1, -1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2],
                  [-1, -9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1],
                  [-9, 3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2],
                  [3, 5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3],
                  [5, 0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9],
                  [0, 0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9, 4],
                  [0, 1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9, 4, -1],
                  [1, 7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9, 4, -1, -3],
                  [7, -7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9, 4, -1, -3, 9],
                  [-7, -4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9, 4, -1, -3, 9, 7],
                  [-4, -6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9, 4, -1, -3, 9, 7, -9],
                  [-6, -3, 7, 0, -5, 1, 1, 0, 2, 1, 2, 3, 9, 4, -1, -3, 9, 7, -9, 8]])
    C_T = np.array([-5, 2, -1, -3, 5, 4, -1, 0, 9, 4, 7, -4, 3, 5, 8, -1, 1, 5, -6, 9])
    result = (x @ Q @ x.T) + (C_T @ x.T)
    return result


if __name__ == "__main__":
    # x= np.random.randint(0,10,8)
    # x = np.random.randint(0, 49, 10)
    x = np.random.randint(0, 99, 20)
    a = f3(x)
    print(a)
